
import React from 'react';
import { AlertTriangle, ChevronRight, ShieldAlert, Bug, Lock } from 'lucide-react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';

type Severity = 'Critical' | 'Medium' | 'Low';

type Vulnerability = {
  id: string;
  title: string;
  description: string;
  severity: Severity;
  location: string;
  category: string;
  icon: React.ElementType;
};

const mockVulnerabilities: Vulnerability[] = [
  {
    id: 'v1',
    title: 'SQL Injection Vulnerability',
    description: 'Input validation missing in login form allows SQL injection attacks.',
    severity: 'Critical',
    location: '/api/auth/login',
    category: 'Injection',
    icon: Bug,
  },
  {
    id: 'v2',
    title: 'Cross-Site Scripting (XSS)',
    description: 'Reflected XSS vulnerability in search functionality.',
    severity: 'Critical',
    location: '/search?q=parameter',
    category: 'XSS',
    icon: AlertTriangle,
  },
  {
    id: 'v3',
    title: 'Weak Password Policy',
    description: 'Password policy does not enforce complexity requirements.',
    severity: 'Medium',
    location: '/api/auth/register',
    category: 'Authentication',
    icon: Lock,
  },
  {
    id: 'v4',
    title: 'Sensitive Data Exposure',
    description: 'API endpoint returns sensitive user information without proper authorization.',
    severity: 'Critical',
    location: '/api/users/profile',
    category: 'Data Exposure',
    icon: ShieldAlert,
  },
  {
    id: 'v5',
    title: 'Missing HTTP Security Headers',
    description: 'Security headers like CSP, X-XSS-Protection are missing.',
    severity: 'Medium',
    location: 'Global HTTP Headers',
    category: 'Configuration',
    icon: ShieldAlert,
  },
];

const getSeverityColor = (severity: Severity): string => {
  switch (severity) {
    case 'Critical':
      return 'bg-destructive text-destructive-foreground';
    case 'Medium':
      return 'bg-orange-500 text-white';
    case 'Low':
      return 'bg-muted text-muted-foreground';
    default:
      return 'bg-muted text-muted-foreground';
  }
};

const VulnerabilityList: React.FC = () => {
  return (
    <Card className="bg-card text-card-foreground">
      <CardHeader className="pb-2">
        <CardTitle className="text-lg font-medium">Detected Vulnerabilities</CardTitle>
      </CardHeader>
      <CardContent>
        <div className="space-y-4">
          {mockVulnerabilities.map((vulnerability) => (
            <div 
              key={vulnerability.id}
              className="p-4 border border-border rounded-md hover:bg-secondary/50 transition-all cursor-pointer"
            >
              <div className="flex items-start justify-between">
                <div className="flex items-start space-x-3">
                  <div className="mt-0.5">
                    <vulnerability.icon className="h-5 w-5 text-destructive" />
                  </div>
                  <div>
                    <h3 className="font-medium">{vulnerability.title}</h3>
                    <p className="text-sm text-muted-foreground mt-1">{vulnerability.description}</p>
                    
                    <div className="flex flex-wrap gap-2 mt-3">
                      <Badge variant="outline" className="text-xs">
                        {vulnerability.category}
                      </Badge>
                      <Badge 
                        className={`text-xs ${getSeverityColor(vulnerability.severity)}`}
                      >
                        {vulnerability.severity}
                      </Badge>
                      <Badge variant="outline" className="text-xs font-mono">
                        {vulnerability.location}
                      </Badge>
                    </div>
                  </div>
                </div>
                <ChevronRight className="h-5 w-5 text-muted-foreground" />
              </div>
            </div>
          ))}
        </div>
      </CardContent>
    </Card>
  );
};

export default VulnerabilityList;
